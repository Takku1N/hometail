// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  role          Role          @default(User)
  status        Boolean       @default(false) // ควรเปลี่ยนเป็น is_verrified
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt

  user_profile  UserProfile?
  owned_pets    Pet[]         @relation("owner_pet")
  // announed_pets Pet[]         @relation("announcer_pet")
  requestsSent  Request[]     @relation("requester")
}

model UserProfile {
  user_id       Int           @id
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  first_name    String
  last_name     String
  phone_number  String
  facebook      String
  image_url     String?
}

model Pet {
  id            Int           @id @default(autoincrement())
  owner_id      Int
  owner         User          @relation("owner_pet" ,fields: [owner_id], references: [id], onDelete: Cascade)
  // annoucer_id   Int?
  // annoucer      User?         @relation("announcer_pet", fields: [annoucer_id], references: [id])
  
  profile       PetProfile?
  requests      Request[]     @relation("pet")
}


model PetProfile {
  pet_id        Int           @id
  pet           Pet           @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  name          String
  age           Int
  gender        String
  description   String
  breed        String
  location      String
  vaccinated    Boolean
  neutered     Boolean
  medical_note  String?
  species      PetType
  adopted       Boolean       @default(false)
  image_url     String?
}

model Request {
  id Int @id @default(autoincrement())
  requester_id Int
  requester   User      @relation("requester",fields: [requester_id], references: [id], onDelete: Cascade)
  pet_id       Int
  pet         Pet       @relation("pet", fields: [pet_id], references: [id], onDelete: Cascade)
  status RequestStatus @default(Pending)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  User
  Admin
}

enum RequestStatus {
  Pending
  Approved
  Rejected
}

enum PetType {
  Dog
  Cat
  Bird
  Hamster
  Lizard
  Rabbit
}